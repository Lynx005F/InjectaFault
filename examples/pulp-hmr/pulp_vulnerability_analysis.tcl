# Copyright 2023 ETH Zurich and University of Bologna.
# Solderpad Hardware License, Version 0.51, see LICENSE for details.
# SPDX-License-Identifier: SHL-0.51
#
# Author: Michael Rogenmoser <michaero@iis.ee.ethz.ch>
#
# This script configures and runs the vulnerability analysis for the pulp cluster core\

# Disable transcript
transcript quietly

# Import Netlist procs
source tcl_files/fault_injection/pulp_extract_nets.tcl

set target_cores {0}

# General
set ::verbosity 2
set ::initial_run_proc pulp_vulnerable_net_analysis_initial_run_proc

set ::script_base_path "tcl_files/fault_injection/"

proc pulp_vulnerable_net_analysis_initial_run_proc {} {
  # Log
  log "/tb_pulp/*"
  log -r "[base_path 0]/*"
  # Run
  run -all
}


# Vulnerability Analysis
set ::initial_seed    0145138
set ::max_num_tests   2000
set ::internal_state [list]

foreach target $target_cores {
  foreach core $target {}
  # TODO
}


set earliest_injection_time 7139518000
set latest_injection_time   7909030000

# Termination Monitor Signals
set ::correct_termination_signal   "/tb_pulp/correct_termination"
set ::incorrect_termination_signal "/tb_pulp/incorrect_termination"
set ::exception_termination_signal "/tb_pulp/exception_termination"

# Logging Settings
set ::log_latent_errors 0
set ::save_wlf_id_list  {1 2 3 4}

# Manual Mode Settings
set ::show_waves          0
set ::show_fault_in_waves 0

# == Configure the settings for the fault injection script

# General Settings
set ::verbosity $::verbosity
set ::log_injections 0
set ::seed $::initial_seed
set ::print_statistics 0

# Time settings
# set ::inject_start_time      6500000ns
set ::inject_stop_time             0
set ::injection_clock             ""
# /tb_pulp/i_dut/cluster_domain_i/cluster_i/clk_cluster"
set ::injection_clock_trigger      0
set ::fault_period                50
set ::rand_initial_injection_phase 0
set ::max_num_fault_inject         0
set ::forced_injection_times   [list]
set ::forced_injection_signals [list]
set ::include_forced_inj_in_stats  0
set ::signal_fault_duration        20ns
set ::register_fault_duration      0ns

# Injection Settings
set ::allow_multi_bit_upset              1
set ::check_core_output_modification     0
set ::check_core_next_state_modification 0
set ::reg_to_sig_ratio                   1
set ::use_bitwidth_as_weight             1

# Select where to inject faults
set inject_registers 0
set inject_combinatorial_logic 1
set ::assertion_disable_list [list]
set ::inject_register_netlist [list]
set ::inject_signals_netlist [list]

# Create the netlists
# foreach target $::target_cores {
#   foreach core $target {}
#   set ::assertion_disable_list [concat $::assertion_disable_list [::get_snitch_assertions $group $tile $core]]
#   if {$inject_registers} {
#     set state_netlist [get_snitch_state_netlist $group $tile $core]
#     set regfile_mem_netlist [get_snitch_regfile_mem_netlist $group $tile $core]
#     set lsu_state_netlist [get_snitch_lsu_state_netlist $group $tile $core]
#     set ::inject_register_netlist [concat $::inject_register_netlist $state_netlist $regfile_mem_netlist $lsu_state_netlist]
#   }
#   if {$inject_combinatorial_logic} {
#     set ::inject_signals_netlist [concat $::inject_signals_netlist [::get_all_core_nets $group $tile $core]]
#   }
# }

# set ::inject_register_netlist [get_core_state_nets 0]
set ::inject_signals_netlist [get_all_core_nets 0]

# Finally, source the vulnerability analysis

source ${::script_base_path}vulnerability_analysis.tcl

# Quit
quit
